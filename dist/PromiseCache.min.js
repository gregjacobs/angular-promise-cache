/*!
 * angular-promise-cache
 * 0.1.0
 *
 * Copyright(c) 2014 Gregory Jacobs <greg@greg-jacobs.com>
 * MIT
 *
 * https://github.com/gregjacobs/angular-promise-cache
 */
angular.module("angular-promise-cache",[]).factory("PromiseCache",function(){function a(a){angular.extend(this,a),this.cache=null,this.size=0}function b(a){this.promise=a,this.entryTime=(new Date).getTime()}return a.prototype={constructor:a,maxAge:null,get:function(a,b){if("function"!=typeof b)throw new Error("`setter` arg required, and must be a function");this.cache||(this.cache={});var c,d=this.cache[a];return c=d&&!this.isExpired(d)?d.getPromise():this.addEntry(a,b)},addEntry:function(a,c){var d,e=c();if(!e||"function"!=typeof e.then)throw new Error("`setter` function must return a Promise object");return d=this.cache[a]=new b(e),this.size++,e.then(null,angular.bind(this,this.removeIfEntry,a,d)),e},getSize:function(){return this.prune(),this.size},has:function(a){if(!this.cache)return!1;var b=this.cache[a];return!!b&&!this.isExpired(b)},remove:function(a){var b=this.cache;return b?void(b[a]&&(1===this.size?this.clear():(delete b[a],this.size--))):!1},removeIfEntry:function(a,b){var c=this.cache;c&&c[a]===b&&this.remove(a)},isExpired:function(a){var b=this.maxAge;if(null==b)return!1;var c=(new Date).getTime();return c>a.getEntryTime()+b},clear:function(){this.cache=null,this.size=0},prune:function(){var a=this.cache;if(a&&null!=this.maxAge)for(var b in a)a.hasOwnProperty(b)&&this.isExpired(a[b])&&this.remove(b)}},b.prototype={constructor:b,getPromise:function(){return this.promise},getEntryTime:function(){return this.entryTime}},a});